rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {

            //required for collection group queries
            match /posts/{postId} {
                allow read;
            }

            match /user/{userId} {
                allow read;
                allow create: if isValidUser(userId)
            }

            match /username/{username} {
                allow read;
                allow create: if isValidUsername(username)
            }

            match /user/{userId}/posts/{postId} {
                allow read;
                allow create: if canCreatePost(userId);
                allow update: if canUpdatePost(userId) || canIncrementHearts(userId, postId);
                allow delete: if request.auth.uid == userId;
            }

            match /user/{userId}/posts/{postId}/heart/{heartId} {
                allow read;
                allow write: if request.auth.uid == heartId
            }

            //User:
            function isValidUser(userId) {
                let isOwner = request.auth.uid == userId;
                let useranme = request.resource.data.username;
                let createdValidUsername = existsAfter(/databases/$(database)/documents/username/$(useranme));

                return isOwner && createdValidUsername;
            }

            //Username:
            function isValidUsername(username) {
                let isOwner = request.auth.uid == request.resource.data.uid;
                let isValidLength = username.size() >= 3 && username.size() <= 15;
                let isValidUserDoc = getAfter(/databases/$(database)/documents/user/$(request.auth.uid)).data.username == username;

                return isOwner && isValidLength && isValidUserDoc;
            }

            function canCreatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.resource.data.createdAt;
                let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.heartCount == 0;
                let username = get(/databases/$(database)/documents/user/$(request.auth.uid)).data.username;
                let usernameMatches = username == request.resource.data.username;

                return isOwner && isNow && isValidContent && usernameMatches;
            }

            function canUpdatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.resource.data.createdAt;
                let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.heartCount == 0;
                let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'heartCount']);

                return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
            }

            function canIncrementHearts(userId, postId) {
                let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']);
                let currentUser = request.auth.uid;
                let heartDocExistsAfter = existsAfter(/databases/$(database)/document/user/$(userId)/posts/$(postId)/heart/$(currentUser));
                let heartDocExists = exists(/databases/$(database)/document/user/$(userId)/posts/$(postId)/heart/$(currentUser));

                let heartDocAdded = !heartDocExists && heartDocExistsAfter;
                let heartDocRemoved = heartDocExists && !heartDocExistsAfter;

                let countChange = request.resource.data.heartCount - resource.data.heartCount;
                let validChange = countChange == 1 || countChange == -1;

                return hasValidFields && validChange && ( countChange == 1 ? heartDocAdded : heartDocRemoved );
            }
        }
    }
}